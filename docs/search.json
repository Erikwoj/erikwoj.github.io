[
  {
    "objectID": "basic-example.html",
    "href": "basic-example.html",
    "title": "Erik Wojcik",
    "section": "",
    "text": "I am Business Administration Major with a Minor in Data Analytics at The State University of New York at Geneseo. I am interested in helping others through my knowledge in Finance and Wealth Management."
  },
  {
    "objectID": "basic-example.html#education",
    "href": "basic-example.html#education",
    "title": "Erik Wojcik",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo| Geneseo, New York | 2023 - Bachelor of Science in Business Administration - Data Analytics"
  },
  {
    "objectID": "basic-example.html#professional-experience",
    "href": "basic-example.html#professional-experience",
    "title": "Erik Wojcik",
    "section": "Professional Experience",
    "text": "Professional Experience\nM&T Bank / Wilmington Trust | Buffalo, New York | Summer 2023 - Incoming Management Development Program Trainee (Wealth Management)\nState University of New York at Geneseo | Geneseo, New York | 2022-Present - Financial Aid Office Assistant (Work Study Program)\nState University of New York at Geneseo | Geneseo, New York | 2022-Present - Finance and Data Analytics Research Assistant\nRich Products | Buffalo, New York | 2021-2022 - Business Analytics Intern"
  },
  {
    "objectID": "DANL310_hw1_Wojcik_Erik.html",
    "href": "DANL310_hw1_Wojcik_Erik.html",
    "title": "Homework 1",
    "section": "",
    "text": "Renovate your personal website on GitHub using Quarto.\n✔️\n\n\n\nProvide ggplot codes to replicate the given figure.\n\nncdc_temp &lt;- read_csv(\n  'https://bcdanl.github.io/data/ncdc_temp_cleaned.csv')\nlibrary(lubridate)\nggplot(ncdc_temp, aes(x = date, y = temperature, color = location)) +\n\ngeom_line(size = 1) + # Adds a layer to the ggplot object with a line plot of the temperature data, with a size of 1.\n\nscale_x_date(name = \"month\", limits = c(ymd(\"0000-01-01\"), ymd(\"0001-01-04\")), # Adds a scale to the x-axis with the label \"month\" and limits of Jan 1, 0000 to Jan 4, 0001, and breaks at the beginning of each quarter (Jan, Apr, Jul, Oct), with corresponding labels.\nbreaks = c(ymd(\"0000-01-01\"), ymd(\"0000-04-01\"), ymd(\"0000-07-01\"),\nymd(\"0000-10-01\"), ymd(\"0001-01-01\")),\nlabels = c(\"Jan\", \"Apr\", \"Jul\", \"Oct\", \"Jan\"), expand = c(1/366, 0)) +\n\nscale_y_continuous(limits = c(19.9, 107), # Adds a scale to the y-axis with limits of 19.9 to 107, breaks at every 20 units, and label \"temperature (°F)\".\nbreaks = seq(20, 100, by = 20),\nname = \"temperature (°F)\") +\n\ntheme(legend.title.align = 0.5) # Adjusts the alignment of the legend title to be centered.\n\n\n\n\n\n\n\n\nncdc_temp &lt;- read_csv(\n  'https://bcdanl.github.io/data/ncdc_temp_cleaned.csv')\nlibrary('ggplot2')\np &lt;- ggplot(ncdc_temp, aes(x = month, y = temperature)) \n\n  # add a box plot with grey fill\np + geom_boxplot(fill = 'grey90') + \n  # add labels for x and y axes\n  labs(x = \"month\",\n       y = \"mean temperature (°F)\") \n\n\n\np\n\n\n\n\n\n\n\n\nncdc_temp &lt;- read_csv(\n  'https://bcdanl.github.io/data/ncdc_temp_cleaned.csv')\n\nggridges::geom_density_ridges()\n\ngeom_density_ridges: na.rm = FALSE, panel_scaling = TRUE\nstat_density_ridges: na.rm = FALSE\nposition_points_sina \n\np &lt;- ggplot(ncdc_temp, aes(x = temperature, y = month)) \n\np + ggridges::geom_density_ridges( # Adds a layer to the ggplot object with a smoothed density plot of the temperature data using the 'ridgeline' plot type.\n  scale = 3, rel_min_height = 0.01, # Sets the scaling and minimum relative height for the plot.\n  bandwidth = 3.4, fill = \"#56B4E9\", color = \"white\" # Sets the bandwidth for the plot, as well as the fill and color for the plot elements.\n) +\n\nscale_x_continuous( # Adds a scale to the x-axis for continuous values.\n  name = \"mean temperature (°F)\", # Sets the label for the x-axis.\n  expand = c(0, 0), breaks = c(0, 25, 50, 75) # Sets the expansion and the break points for the x-axis.\n) +\n\nscale_y_discrete(\n  name = \"month\", expand = c(0, .2, 0, 2.6)) + # Adds a scale to the y-axis for discrete (categorical) values, with a label and a custom expansion.\n\ntheme( # Applies a custom theme to the ggplot object.\n  plot.margin = margin(3, 7, 3, 1.5) # Sets the margin of the plot.\n)\n\n\n\n\n\n\n\n\nm &lt;- ggplot(data = mtcars, aes(x = disp, y = mpg, color = hp)) \n\nm + geom_point(aes(color = hp)) + # add scatter plot with color mapped to \"hp\" variable\n  labs(x = \"displacement(cu. in.)\", y = \"fuel efficiency(mpg)\")+ # add labels to x and y axes\n  scale_color_gradient()+ # add color gradient scale legend\n  scale_fill_brewer(palette = \"Emrld\") # add fill color palette with \"Emrld\" scheme to the legend\n\n\n\n\n\n\n\n\npopgrowth_df &lt;- read_csv(\n  'https://bcdanl.github.io/data/popgrowth.csv')\np &lt;- ggplot(popgrowth_df, \n            aes(x = reorder(state, popgrowth), \n                y = 100*popgrowth, \n                fill = region))\np + geom_col() + # Add the geom for the columns\n  scale_y_continuous(\n    limits = c(-.6, 37.5), expand = c(0, 0), # Set y axis limits and expansion\n    labels = scales::percent_format(accuracy = 1, scale = 1), # Set percent labels for y axis\n    name = \"population growth, 2000 to 2010\" # Set name for y axis\n    ) +\n  coord_flip() + # Flip the x and y axis\n  theme(legend.position = c(.67, .4), # Set legend position\n        axis.text.y = element_text( size = 6, \n                                    margin = margin(t = 0, r = 0, b = 0, l = 0) )) # Adjust the size and margin for y axis text\n\n\n\n\n\n\n\n\nmale_Aus &lt;- read_csv(\n  'https://bcdanl.github.io/data/aus_athletics_male.csv')\n\n# Define color and fill vectors for use in plot\ncolors &lt;- c(\"#BD3828\", rep(\"#808080\", 4))\nfills &lt;- c(\"#BD3828D0\", rep(\"#80808080\", 4))\n\np &lt;- ggplot(male_Aus, aes(x=height, y=pcBfat, shape=sport, color = sport, fill = sport))\n\n# Add geom_point layer with custom size\np + geom_point(size = 3) +\n\n# Set shape values for different sports\n  scale_shape_manual(values = 21:25) +\n\n# Set color values for different sports\n  scale_color_manual(values = colors) +\n\n# Set fill values for different sports\n  scale_fill_manual(values = fills) +\n\n# Set x and y axis labels\n  labs(x = \"height (cm)\",\n       y = \"% body fat\" )\n\n\n\n\n\n\n\n\ntitanic &lt;- read_csv(\n  'https://bcdanl.github.io/data/titanic_cleaned.csv')\n\np &lt;- ggplot(titanic, aes(x = age, y = after_stat(count) ) ) \n\n# Add a density line plot for all passengers with transparent color, and fill legend with \"all passengers\"\np + geom_density(\n    data = select(titanic, -sex), \n    aes(fill = \"all passengers\"),\n    color = \"transparent\"\n  ) + \n  # Add another density line plot for each sex with transparent color, and fill legend with sex\n  geom_density(aes(fill = sex), bw = 2, color = \"transparent\") +\n  # Set the x-axis limits, name, and expand arguments\n  scale_x_continuous(limits = c(0, 75), name = \"passenger age (years)\", expand = c(0, 0)) +\n  # Set the y-axis limits, name, and expand arguments\n  scale_y_continuous(limits = c(0, 26), name = \"count\", expand = c(0, 0)) +\n  # Set the manual color and fill values, breaks, and labels for the legend\n  scale_fill_manual(\n    values = c(\"#b3b3b3a0\", \"#0072B2\", \"#D55E00\"), \n    breaks = c(\"all passengers\", \"male\", \"female\"),\n    labels = c(\"all passengers  \", \"males  \", \"females\"),\n    name = NULL,\n    guide = guide_legend(direction = \"horizontal\")\n  ) +\n  # Set the Cartesian coordinate system to allow for data points to fall outside the plot limits\n  coord_cartesian(clip = \"off\") +\n  # Create separate density line plots for male and female passengers\n  facet_wrap(~sex) +\n  # Set the x-axis line to blank, increase the strip text size, and set the legend position and margin\n  theme(\n    axis.line.x = element_blank(),\n    strip.text = element_text(size = 14, margin = margin(0, 0, 0.2, 0, \"cm\")),\n    legend.position = \"bottom\",\n    legend.justification = \"right\",\n    legend.margin = margin(4.5, 0, 1.5, 0, \"pt\"),\n    legend.spacing.x = grid::unit(4.5, \"pt\"),\n    legend.spacing.y = grid::unit(0, \"pt\"),\n    legend.box.spacing = grid::unit(0, \"cm\")\n  )\n\n\n\n\n\n\n\n\ncows_filtered &lt;- read_csv(\n  'https://bcdanl.github.io/data/cows_filtered.csv')\n\n\np &lt;- ggplot(cows_filtered, aes(x = butterfat, color = breed, fill = breed))\n\n# add a density line for each breed with some transparency\np + geom_density(alpha = .2) +\n\n# set x-axis properties\nscale_x_continuous(\n  expand = c(0, 0), # remove padding from axis limits\n  labels = scales::percent_format(accuracy = 1, scale = 1), # format axis labels as percentages with 1 decimal point\n  name = \"butterfat contents\" # set axis label\n) +\n\n# set y-axis properties\nscale_y_continuous(limits = c(0, 1.99), expand = c(0, 0)) +\n\n# set plot area properties\ncoord_cartesian(clip = \"off\") + # allow density lines to extend beyond axis limits\ntheme(axis.line.x = element_blank()) # remove x-axis line"
  },
  {
    "objectID": "DANL310_hw1_Wojcik_Erik.html#question-1",
    "href": "DANL310_hw1_Wojcik_Erik.html#question-1",
    "title": "Homework 1",
    "section": "",
    "text": "Renovate your personal website on GitHub using Quarto.\n✔️"
  },
  {
    "objectID": "DANL310_hw1_Wojcik_Erik.html#question-2",
    "href": "DANL310_hw1_Wojcik_Erik.html#question-2",
    "title": "Homework 1",
    "section": "",
    "text": "Provide ggplot codes to replicate the given figure.\n\nncdc_temp &lt;- read_csv(\n  'https://bcdanl.github.io/data/ncdc_temp_cleaned.csv')\nlibrary(lubridate)\nggplot(ncdc_temp, aes(x = date, y = temperature, color = location)) +\n\ngeom_line(size = 1) + # Adds a layer to the ggplot object with a line plot of the temperature data, with a size of 1.\n\nscale_x_date(name = \"month\", limits = c(ymd(\"0000-01-01\"), ymd(\"0001-01-04\")), # Adds a scale to the x-axis with the label \"month\" and limits of Jan 1, 0000 to Jan 4, 0001, and breaks at the beginning of each quarter (Jan, Apr, Jul, Oct), with corresponding labels.\nbreaks = c(ymd(\"0000-01-01\"), ymd(\"0000-04-01\"), ymd(\"0000-07-01\"),\nymd(\"0000-10-01\"), ymd(\"0001-01-01\")),\nlabels = c(\"Jan\", \"Apr\", \"Jul\", \"Oct\", \"Jan\"), expand = c(1/366, 0)) +\n\nscale_y_continuous(limits = c(19.9, 107), # Adds a scale to the y-axis with limits of 19.9 to 107, breaks at every 20 units, and label \"temperature (°F)\".\nbreaks = seq(20, 100, by = 20),\nname = \"temperature (°F)\") +\n\ntheme(legend.title.align = 0.5) # Adjusts the alignment of the legend title to be centered."
  },
  {
    "objectID": "DANL310_hw1_Wojcik_Erik.html#question-2b",
    "href": "DANL310_hw1_Wojcik_Erik.html#question-2b",
    "title": "Homework 1",
    "section": "",
    "text": "ncdc_temp &lt;- read_csv(\n  'https://bcdanl.github.io/data/ncdc_temp_cleaned.csv')\nlibrary('ggplot2')\np &lt;- ggplot(ncdc_temp, aes(x = month, y = temperature)) \n\n  # add a box plot with grey fill\np + geom_boxplot(fill = 'grey90') + \n  # add labels for x and y axes\n  labs(x = \"month\",\n       y = \"mean temperature (°F)\") \n\n\n\np"
  },
  {
    "objectID": "DANL310_hw1_Wojcik_Erik.html#question-2c",
    "href": "DANL310_hw1_Wojcik_Erik.html#question-2c",
    "title": "Homework 1",
    "section": "",
    "text": "ncdc_temp &lt;- read_csv(\n  'https://bcdanl.github.io/data/ncdc_temp_cleaned.csv')\n\nggridges::geom_density_ridges()\n\ngeom_density_ridges: na.rm = FALSE, panel_scaling = TRUE\nstat_density_ridges: na.rm = FALSE\nposition_points_sina \n\np &lt;- ggplot(ncdc_temp, aes(x = temperature, y = month)) \n\np + ggridges::geom_density_ridges( # Adds a layer to the ggplot object with a smoothed density plot of the temperature data using the 'ridgeline' plot type.\n  scale = 3, rel_min_height = 0.01, # Sets the scaling and minimum relative height for the plot.\n  bandwidth = 3.4, fill = \"#56B4E9\", color = \"white\" # Sets the bandwidth for the plot, as well as the fill and color for the plot elements.\n) +\n\nscale_x_continuous( # Adds a scale to the x-axis for continuous values.\n  name = \"mean temperature (°F)\", # Sets the label for the x-axis.\n  expand = c(0, 0), breaks = c(0, 25, 50, 75) # Sets the expansion and the break points for the x-axis.\n) +\n\nscale_y_discrete(\n  name = \"month\", expand = c(0, .2, 0, 2.6)) + # Adds a scale to the y-axis for discrete (categorical) values, with a label and a custom expansion.\n\ntheme( # Applies a custom theme to the ggplot object.\n  plot.margin = margin(3, 7, 3, 1.5) # Sets the margin of the plot.\n)"
  },
  {
    "objectID": "DANL310_hw1_Wojcik_Erik.html#question-2d",
    "href": "DANL310_hw1_Wojcik_Erik.html#question-2d",
    "title": "Homework 1",
    "section": "",
    "text": "m &lt;- ggplot(data = mtcars, aes(x = disp, y = mpg, color = hp)) \n\nm + geom_point(aes(color = hp)) + # add scatter plot with color mapped to \"hp\" variable\n  labs(x = \"displacement(cu. in.)\", y = \"fuel efficiency(mpg)\")+ # add labels to x and y axes\n  scale_color_gradient()+ # add color gradient scale legend\n  scale_fill_brewer(palette = \"Emrld\") # add fill color palette with \"Emrld\" scheme to the legend"
  },
  {
    "objectID": "DANL310_hw1_Wojcik_Erik.html#question-2e",
    "href": "DANL310_hw1_Wojcik_Erik.html#question-2e",
    "title": "Homework 1",
    "section": "",
    "text": "popgrowth_df &lt;- read_csv(\n  'https://bcdanl.github.io/data/popgrowth.csv')\np &lt;- ggplot(popgrowth_df, \n            aes(x = reorder(state, popgrowth), \n                y = 100*popgrowth, \n                fill = region))\np + geom_col() + # Add the geom for the columns\n  scale_y_continuous(\n    limits = c(-.6, 37.5), expand = c(0, 0), # Set y axis limits and expansion\n    labels = scales::percent_format(accuracy = 1, scale = 1), # Set percent labels for y axis\n    name = \"population growth, 2000 to 2010\" # Set name for y axis\n    ) +\n  coord_flip() + # Flip the x and y axis\n  theme(legend.position = c(.67, .4), # Set legend position\n        axis.text.y = element_text( size = 6, \n                                    margin = margin(t = 0, r = 0, b = 0, l = 0) )) # Adjust the size and margin for y axis text"
  },
  {
    "objectID": "DANL310_hw1_Wojcik_Erik.html#question-2f",
    "href": "DANL310_hw1_Wojcik_Erik.html#question-2f",
    "title": "Homework 1",
    "section": "",
    "text": "male_Aus &lt;- read_csv(\n  'https://bcdanl.github.io/data/aus_athletics_male.csv')\n\n# Define color and fill vectors for use in plot\ncolors &lt;- c(\"#BD3828\", rep(\"#808080\", 4))\nfills &lt;- c(\"#BD3828D0\", rep(\"#80808080\", 4))\n\np &lt;- ggplot(male_Aus, aes(x=height, y=pcBfat, shape=sport, color = sport, fill = sport))\n\n# Add geom_point layer with custom size\np + geom_point(size = 3) +\n\n# Set shape values for different sports\n  scale_shape_manual(values = 21:25) +\n\n# Set color values for different sports\n  scale_color_manual(values = colors) +\n\n# Set fill values for different sports\n  scale_fill_manual(values = fills) +\n\n# Set x and y axis labels\n  labs(x = \"height (cm)\",\n       y = \"% body fat\" )"
  },
  {
    "objectID": "DANL310_hw1_Wojcik_Erik.html#question-2g",
    "href": "DANL310_hw1_Wojcik_Erik.html#question-2g",
    "title": "Homework 1",
    "section": "",
    "text": "titanic &lt;- read_csv(\n  'https://bcdanl.github.io/data/titanic_cleaned.csv')\n\np &lt;- ggplot(titanic, aes(x = age, y = after_stat(count) ) ) \n\n# Add a density line plot for all passengers with transparent color, and fill legend with \"all passengers\"\np + geom_density(\n    data = select(titanic, -sex), \n    aes(fill = \"all passengers\"),\n    color = \"transparent\"\n  ) + \n  # Add another density line plot for each sex with transparent color, and fill legend with sex\n  geom_density(aes(fill = sex), bw = 2, color = \"transparent\") +\n  # Set the x-axis limits, name, and expand arguments\n  scale_x_continuous(limits = c(0, 75), name = \"passenger age (years)\", expand = c(0, 0)) +\n  # Set the y-axis limits, name, and expand arguments\n  scale_y_continuous(limits = c(0, 26), name = \"count\", expand = c(0, 0)) +\n  # Set the manual color and fill values, breaks, and labels for the legend\n  scale_fill_manual(\n    values = c(\"#b3b3b3a0\", \"#0072B2\", \"#D55E00\"), \n    breaks = c(\"all passengers\", \"male\", \"female\"),\n    labels = c(\"all passengers  \", \"males  \", \"females\"),\n    name = NULL,\n    guide = guide_legend(direction = \"horizontal\")\n  ) +\n  # Set the Cartesian coordinate system to allow for data points to fall outside the plot limits\n  coord_cartesian(clip = \"off\") +\n  # Create separate density line plots for male and female passengers\n  facet_wrap(~sex) +\n  # Set the x-axis line to blank, increase the strip text size, and set the legend position and margin\n  theme(\n    axis.line.x = element_blank(),\n    strip.text = element_text(size = 14, margin = margin(0, 0, 0.2, 0, \"cm\")),\n    legend.position = \"bottom\",\n    legend.justification = \"right\",\n    legend.margin = margin(4.5, 0, 1.5, 0, \"pt\"),\n    legend.spacing.x = grid::unit(4.5, \"pt\"),\n    legend.spacing.y = grid::unit(0, \"pt\"),\n    legend.box.spacing = grid::unit(0, \"cm\")\n  )"
  },
  {
    "objectID": "DANL310_hw1_Wojcik_Erik.html#question-2h",
    "href": "DANL310_hw1_Wojcik_Erik.html#question-2h",
    "title": "Homework 1",
    "section": "",
    "text": "cows_filtered &lt;- read_csv(\n  'https://bcdanl.github.io/data/cows_filtered.csv')\n\n\np &lt;- ggplot(cows_filtered, aes(x = butterfat, color = breed, fill = breed))\n\n# add a density line for each breed with some transparency\np + geom_density(alpha = .2) +\n\n# set x-axis properties\nscale_x_continuous(\n  expand = c(0, 0), # remove padding from axis limits\n  labels = scales::percent_format(accuracy = 1, scale = 1), # format axis labels as percentages with 1 decimal point\n  name = \"butterfat contents\" # set axis label\n) +\n\n# set y-axis properties\nscale_y_continuous(limits = c(0, 1.99), expand = c(0, 0)) +\n\n# set plot area properties\ncoord_cartesian(clip = \"off\") + # allow density lines to extend beyond axis limits\ntheme(axis.line.x = element_blank()) # remove x-axis line"
  },
  {
    "objectID": "DANL310_hw2_Wojcik_Erik.html",
    "href": "DANL310_hw2_Wojcik_Erik.html",
    "title": "Homework 2",
    "section": "",
    "text": "Proposal for DANL 310 Project by Erik Wojcik, majoring in Business Administration with a minor in Data Analytics.\nApple Inc. is one of the most prominent companies in the world with a market capitalization of over $2 trillion. Apple’s stock price is often used as an indicator of the health of the tech industry and the stock market as a whole. The S&P 500 is a benchmark index of 500 of the largest publicly traded companies in the United States. By comparing Apple’s performance to the S&P 500 through a Capital Asset Pricing Model (CAPM), I can gain insights into the relative performance of Apple as an investment opportunity and how it has responded to different market conditions over the years. This project is interesting because it provides a deeper understanding of the performance of Apple, which can be useful for investors, financial analysts, and researchers.\nMy research question is “How does Apple’s stock price compare to the S&P 500 using a Capital Asset Pricing Model (CAPM) from 2000-2023?”\nThe data for this project will be obtained from a reputable financial data provider, such as Yahoo Finance or Google Finance. I will collect daily closing prices for Apple’s stock (AAPL) and the S&P 500 Index (SPY) from January 1, 2000, to March 28, 2023. This will provide a total of 6,023 daily observations for each security. I will also collect data on the risk-free rate of return (such as the yield on 10-year U.S. Treasury bonds) for each day in the sample period.\nSummary statistics and visualizations of the data will be used to gain insights into the performance of Apple’s stock and the S&P 500. I will examine the mean, standard deviation, minimum, maximum, and skewness of daily returns for each security. I will also create a scatter plot of Apple’s returns against the returns of the S&P 500 to visually compare their performance.\nThe modeling approach I will use is a Capital Asset Pricing Model (CAPM), which is widely used in finance to estimate the expected return on an investment. I will estimate the beta coefficient for Apple’s stock using a linear regression model with the S&P 500 Index returns as the independent variable and Apple’s returns as the dependent variable. I will also estimate the alpha coefficient, which measures the excess return of Apple’s stock compared to the expected return based on its beta coefficient and the risk-free rate.\nMy statistical hypothesis is that Apple’s stock has a positive beta coefficient, indicating that it is positively correlated with the overall market (as represented by the S&P 500). I also expect to find that Apple’s alpha coefficient is statistically significant, indicating that it has provided a higher return than expected based on its level of market risk.\nThe project will be divided into four main parts: data collection and cleaning, data exploration and visualization, modeling and analysis, and report writing. In the first phase, I will collect and clean the data, removing any missing or erroneous data points. In the second phase, I will explore the data through summary statistics and visualizations to gain insights into the performance of Apple and the S&P 500. In the third phase, I will estimate the beta and alpha coefficients using a linear regression model and interpret the results. Finally, in the fourth phase, I will write a report summarizing my findings, including insights into Apple’s performance, the statistical significance of my results, and potential implications for investors.\n\n\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Read in the CSV file\nhdi_corruption &lt;- read.csv('https://bcdanl.github.io/data/hdi_corruption.csv')\n\n# Create a vector of colors for each region\nregion_colors &lt;- c(\"Americas\" = \"#F9B8AA\", \n                   \"Asia Pacific\" = \"#D7E295\", \n                   \"Europe and Central Asia\" = \"#95E2B5\", \n                   \"Middle East and North Africa\" = \"#95E2E1\", \n                   \"Sub Saharan Africa\" = \"#E295DD\")\n\n# Create the scatter plot\np&lt;- ggplot(hdi_corruption, aes(x = cpi, y = hdi, color = region)) +\n  geom_point(size = 3) +\n  scale_color_manual(values = region_colors) +\n  geom_smooth(se = FALSE,\n              method = \"loess\",\n              formula = y ~ x, color = \"blue\", size = 1) +\n  labs(title = \"Corruption Perception Index vs. Human Development Index by Region\",\n       x = \"Corruption Perception Index,2014 (100 = least corrupt)\",\n       y = \"Human Development Index, 20014 (1.0 = most developed)\",\n       color = \"Region\") +\n  theme_minimal()+\n  xlim(20, 80) +\n  ylim(0.4, 1.0) +\n  geom_text(data = hdi_corruption %&gt;% filter(country %in% c(\"Argentina\", \"China\", \"Egypt\", \"Greece\", \"South Africa\", \"Senegal\", \"United States\", \"Germany\", \"Norway\", \"Singapore\")),\n            aes(x = cpi, y = hdi, label = country), \n            size = 2, hjust = -0.2, vjust = -0.2, color = \"black\")\n\np+theme(aspect.ratio = 1)"
  },
  {
    "objectID": "DANL310_hw2_Wojcik_Erik.html#question-1",
    "href": "DANL310_hw2_Wojcik_Erik.html#question-1",
    "title": "Homework 2",
    "section": "",
    "text": "Proposal for DANL 310 Project by Erik Wojcik, majoring in Business Administration with a minor in Data Analytics.\nApple Inc. is one of the most prominent companies in the world with a market capitalization of over $2 trillion. Apple’s stock price is often used as an indicator of the health of the tech industry and the stock market as a whole. The S&P 500 is a benchmark index of 500 of the largest publicly traded companies in the United States. By comparing Apple’s performance to the S&P 500 through a Capital Asset Pricing Model (CAPM), I can gain insights into the relative performance of Apple as an investment opportunity and how it has responded to different market conditions over the years. This project is interesting because it provides a deeper understanding of the performance of Apple, which can be useful for investors, financial analysts, and researchers.\nMy research question is “How does Apple’s stock price compare to the S&P 500 using a Capital Asset Pricing Model (CAPM) from 2000-2023?”\nThe data for this project will be obtained from a reputable financial data provider, such as Yahoo Finance or Google Finance. I will collect daily closing prices for Apple’s stock (AAPL) and the S&P 500 Index (SPY) from January 1, 2000, to March 28, 2023. This will provide a total of 6,023 daily observations for each security. I will also collect data on the risk-free rate of return (such as the yield on 10-year U.S. Treasury bonds) for each day in the sample period.\nSummary statistics and visualizations of the data will be used to gain insights into the performance of Apple’s stock and the S&P 500. I will examine the mean, standard deviation, minimum, maximum, and skewness of daily returns for each security. I will also create a scatter plot of Apple’s returns against the returns of the S&P 500 to visually compare their performance.\nThe modeling approach I will use is a Capital Asset Pricing Model (CAPM), which is widely used in finance to estimate the expected return on an investment. I will estimate the beta coefficient for Apple’s stock using a linear regression model with the S&P 500 Index returns as the independent variable and Apple’s returns as the dependent variable. I will also estimate the alpha coefficient, which measures the excess return of Apple’s stock compared to the expected return based on its beta coefficient and the risk-free rate.\nMy statistical hypothesis is that Apple’s stock has a positive beta coefficient, indicating that it is positively correlated with the overall market (as represented by the S&P 500). I also expect to find that Apple’s alpha coefficient is statistically significant, indicating that it has provided a higher return than expected based on its level of market risk.\nThe project will be divided into four main parts: data collection and cleaning, data exploration and visualization, modeling and analysis, and report writing. In the first phase, I will collect and clean the data, removing any missing or erroneous data points. In the second phase, I will explore the data through summary statistics and visualizations to gain insights into the performance of Apple and the S&P 500. In the third phase, I will estimate the beta and alpha coefficients using a linear regression model and interpret the results. Finally, in the fourth phase, I will write a report summarizing my findings, including insights into Apple’s performance, the statistical significance of my results, and potential implications for investors."
  },
  {
    "objectID": "DANL310_hw2_Wojcik_Erik.html#question-2a",
    "href": "DANL310_hw2_Wojcik_Erik.html#question-2a",
    "title": "Homework 2",
    "section": "",
    "text": "library(ggplot2)\nlibrary(dplyr)\n\n# Read in the CSV file\nhdi_corruption &lt;- read.csv('https://bcdanl.github.io/data/hdi_corruption.csv')\n\n# Create a vector of colors for each region\nregion_colors &lt;- c(\"Americas\" = \"#F9B8AA\", \n                   \"Asia Pacific\" = \"#D7E295\", \n                   \"Europe and Central Asia\" = \"#95E2B5\", \n                   \"Middle East and North Africa\" = \"#95E2E1\", \n                   \"Sub Saharan Africa\" = \"#E295DD\")\n\n# Create the scatter plot\np&lt;- ggplot(hdi_corruption, aes(x = cpi, y = hdi, color = region)) +\n  geom_point(size = 3) +\n  scale_color_manual(values = region_colors) +\n  geom_smooth(se = FALSE,\n              method = \"loess\",\n              formula = y ~ x, color = \"blue\", size = 1) +\n  labs(title = \"Corruption Perception Index vs. Human Development Index by Region\",\n       x = \"Corruption Perception Index,2014 (100 = least corrupt)\",\n       y = \"Human Development Index, 20014 (1.0 = most developed)\",\n       color = \"Region\") +\n  theme_minimal()+\n  xlim(20, 80) +\n  ylim(0.4, 1.0) +\n  geom_text(data = hdi_corruption %&gt;% filter(country %in% c(\"Argentina\", \"China\", \"Egypt\", \"Greece\", \"South Africa\", \"Senegal\", \"United States\", \"Germany\", \"Norway\", \"Singapore\")),\n            aes(x = cpi, y = hdi, label = country), \n            size = 2, hjust = -0.2, vjust = -0.2, color = \"black\")\n\np+theme(aspect.ratio = 1)"
  },
  {
    "objectID": "DANL310_hw2_Wojcik_Erik.html#question-2c",
    "href": "DANL310_hw2_Wojcik_Erik.html#question-2c",
    "title": "Homework 2",
    "section": "Question 2c",
    "text": "Question 2c\n\nlibrary(ggcorrplot) # to create correlation heatmaps using ggcorrplot()\n\nbeer_mkt &lt;- read_csv('https://bcdanl.github.io/data/beer_markets.csv')\n\nView(beer_mkt)\n\n\nbeer_dummies &lt;- beer_mkt %&gt;% select(-hh, -market) \nreg &lt;- lm(data = beer_dummies,\n          beer_floz ~ .)\nbeer_dummies &lt;-  as.data.frame(model.matrix(reg))[, -1]\nbeer_dummies &lt;- cbind(beer_mkt$beer_floz ,beer_dummies)\nbeer_dummies &lt;- beer_dummies %&gt;% \n  rename(beer_floz = `beer_mkt$beer_floz`)\n\ncorrelations &lt;- cor(beer_dummies)\n\nvars_to_plot &lt;- names(sort(colMeans(abs(correlations)), decreasing = TRUE)[1:14])\n\ncor_to_plot &lt;- correlations[vars_to_plot, vars_to_plot]\n\nggcorrplot(cor_to_plot, hc.order = TRUE, \n           type = \"lower\", \n           lab = TRUE, \n           lab_size = 2, \n           ggtheme = ggplot2::theme_bw())"
  },
  {
    "objectID": "DANL310_midterm_Wojcik_Erik.html",
    "href": "DANL310_midterm_Wojcik_Erik.html",
    "title": "DANL 310: Data Visualization and Presentation Midterm Exam",
    "section": "",
    "text": "library(knitr)\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0     ✔ purrr   1.0.1\n✔ tibble  3.2.1     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 1.0.0\n\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(lubridate)\n\nWarning: package 'lubridate' was built under R version 4.2.3\n\n\n\nAttaching package: 'lubridate'\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(socviz)\nlibrary(ggthemes)\nlibrary(hrbrthemes)\n\nWarning: package 'hrbrthemes' was built under R version 4.2.3\n\n\nNOTE: Either Arial Narrow or Roboto Condensed fonts are required to use these themes.\n      Please use hrbrthemes::import_roboto_condensed() to install Roboto Condensed and\n      if Arial Narrow is not on your system, please see https://bit.ly/arialnarrow\n\nlibrary(gapminder)\n\nWarning: package 'gapminder' was built under R version 4.2.3\n\nlibrary(stargazer)\n\n\nPlease cite as: \n\n Hlavac, Marek (2022). stargazer: Well-Formatted Regression and Summary Statistics Tables.\n R package version 5.2.3. https://CRAN.R-project.org/package=stargazer \n\n\n\ngapminder &lt;- gapminder\n# Set the data and filter to include only observations from 2007 and exclude Oceania\nggplot(data = filter(gapminder, year == 2007,\n                     continent != 'Oceania'),\n\n       # Set the aesthetics (x-axis and y-axis) to life expectancy and reorder countries by life expectancy\n       aes(x = lifeExp,\n           y = fct_reorder(country, lifeExp))) +\n\n  # Add a layer of points to the plot, setting the color to blue and size to 1.75\n  geom_point(color = \"#0072B2\", size = 1.75) +\n\n  # Add a layer of text labels to the plot, setting the label to life expectancy, hjust to -.25, and size to 2\n  geom_text(aes(label = lifeExp), hjust = -.25,\n            size = 2) +\n\n  # Facet the plot by continent, with y-scales free\n  facet_wrap(.~continent, scales = \"free_y\") +\n\n  # Set the x-axis label to NULL (no name) and limit the x-axis to 35-90\n  scale_x_continuous(\n    name = NULL,\n    lim = c(35, 90)\n  ) +\n\n  # Set the y-axis label to NULL (no name)\n  scale_y_discrete(name = NULL) +\n\n  # Add a title to the plot\n  labs(title = 'Life expectancy in 2007') +\n\n  # Set the theme to minimal\n  theme_minimal() +\n\n  # Customize theme elements: set the y-axis text size, the plot title size and position, and the facet strip text size and font face\n  theme(\n    axis.text.y = element_text(size = rel(.75)),\n    plot.title = element_text(size = rel(1.5),\n                              hjust = 0.5,\n                              face = 'bold'),\n    strip.text = element_text(size = rel(1.25),\n                              face = 'bold')\n  )\n\n\n\n\n\nn_tweets_long &lt;- read_csv(\n  'https://bcdanl.github.io/data/n_tweets_long.csv')\n\nRows: 24 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): type\ndbl (2): year, n\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# The following line filters the rows of the n_tweets_long data frame that have a value of \"n_ot_us\" or \"n_ot_wrld\" in the \"type\" column. \n# It then creates a new column called \"type\" that replaces \"n_ot_us\" with \"US\" and \"n_ot_wrld\" with \"Worldwide\".\nn_tweets_long1 &lt;- n_tweets_long %&gt;% \n  filter(type %in% c(\"n_ot_us\", \"n_ot_wrld\") ) %&gt;% \n  mutate(type = ifelse(type == \"n_ot_us\", \"US\", \"Worldwide\"))\n\n\n# The following line filters the rows of the n_tweets_long data frame that have a value of \"n_rt_lk_us\" or \"n_rt_lk_wrld\" in the \"type\" column. \n# It then creates a new column called \"type\" that replaces \"n_rt_lk_us\" with \"US\" and \"n_rt_lk_wrld\" with \"Worldwide\".\nn_tweets_long2 &lt;- n_tweets_long %&gt;% \n  filter(type %in% c(\"n_rt_lk_us\", \"n_rt_lk_wrld\") ) %&gt;% \n  mutate(type = ifelse(type == \"n_rt_lk_us\", \"US\", \"Worldwide\"))\n  \n\n\np2 &lt;- ggplot(mapping = aes(x = year, y = n)) +  # Create a ggplot object with the mapping of the x-axis to the \"year\" variable and y-axis to the \"n\" variable\n  geom_col(n_tweets_long1,  # Add a column chart layer with the \"n_tweets_long1\" data\n           mapping = aes(fill = type),  # Map the \"type\" variable to the fill aesthetic of the chart\n           position = 'dodge', alpha = .67) +  # Set the position of the columns to \"dodge\" and the transparency to 0.67\n  geom_line(n_tweets_long2,  # Add a line chart layer with the \"n_tweets_long2\" data\n            mapping = aes(color = type),  # Map the \"type\" variable to the color aesthetic of the chart\n            size = 1.5) +  # Set the line size to 1.5\n  geom_point(data = n_tweets_long2,  # Add a point chart layer with the \"n_tweets_long2\" data\n             size = 2,  # Set the point size to 2\n             color = 'black')  +  # Set the point color to black\n  scale_x_continuous(breaks = seq(2012, 2017, 1)) +  # Set the x-axis breaks to the sequence from 2012 to 2017 with an interval of 1\n  scale_y_continuous(label = scales::comma) +  # Format the y-axis labels using the comma function from the scales package\n  scale_color_manual(values = c('maroon', '#428bca')) +  # Manually set the color values for the color aesthetic\n  scale_fill_manual(values = c('maroon', '#428bca')) +   # Manually set the color values for the fill aesthetic\n  guides(fill = guide_legend(reverse = TRUE,  # Customize the fill legend guide by reversing the order of the legend, positioning the labels at the bottom, and setting the number of rows to 2 and the key width to 2\n                             # title.position = \"top\",\n                             label.position = \"bottom\",\n                             keywidth = 2,\n                             nrow = 2,\n                             order = 1),\n         color = guide_legend(reverse = TRUE,  # Customize the color legend guide by reversing the order of the legend, positioning the labels at the bottom, and setting the number of rows to 2 and the key width to 2\n                             # title.position = \"top\",\n                             label.position = \"bottom\",\n                             keywidth = 2,\n                             nrow = 2,\n                             order = 2)) +\n  labs(x = \"Year\",  # Add x-axis label \"Year\"\n       y = \"Number of Tweets, Retweets & Likes\\n (in thousand)\",  # Add y-axis label \"Number of Tweets, Retweets & Likes (in thousand)\"\n       fill = \"Tweets\",  # Add fill legend label \"Tweets\"\n       color = \"Retweets and likes\",  # Add color legend label \"Retweets and likes\"\n       caption = 'Source: Choe, \"Social Media Campaigns, Lobbying, and Climate Change Legislation:\\n Evidence from #climatechange/#globalwarming and Energy Lobbies\" (2023)') +  # Add caption with source information\n  theme_ipsum() +  # Use the 'theme_ipsum' theme from the 'ggthemes' package\n  theme(\n  axis.title.y = element_text(\n    size = rel(1.5),\n    margin = margin(t = 0, r = 20, b = 0, l = 0) # set the margin for the y axis title\n  ),\n  axis.title.x = element_text(\n    size = rel(1.5),\n    margin = margin(t = 10, r = 0, b = 0, l = 0) # set the margin for the x axis title\n  ),\n  axis.text.x = element_text(\n    size = rel(1.25) # set the font size for the x axis tick labels\n  ),\n  axis.text.y = element_text(\n    size = rel(1.25) # set the font size for the y axis tick labels\n  ),\n  legend.position = 'top', # set the position of the legend\n  legend.title = element_text(\n    size = rel(1),\n    face = 'bold',\n    hjust = .5 # set the font size, face and horizontal justification for the legend title\n  ),\n  legend.text = element_text(\n    size = rel(1) # set the font size for the legend text\n  ),\n  legend.spacing.x = unit(1.25, \"cm\"), # set the horizontal spacing between legend items\n  plot.caption = element_text(\n    size = rel(1.25),\n    hjust = .5 # set the font size and horizontal justification for the plot caption\n  )\n)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\np2\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\n\n\n\n\nnyc_dog_license &lt;- read_csv(\n  'https://bcdanl.github.io/data/nyc_dog_license.csv')\n\nRows: 222328 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): animal_name, animal_gender, breed_rc, borough\ndbl  (3): animal_birth_year, zip_code, extract_year\ndate (2): license_issued_date, license_expired_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nnyc_zips_coord &lt;- read_csv(\n  'https://bcdanl.github.io/data/nyc_zips_coord.csv')\n\nRows: 11175 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (3): X, Y, objectid\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nnyc_zips_df &lt;- read_csv(\n  'https://bcdanl.github.io/data/nyc_zips_df.csv')\n\nRows: 262 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): po_name, state, borough, cty_fips, x_id\ndbl (6): objectid, zip_code, st_fips, bld_gpostal_code, shape_leng, shape_area\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nnyc_dog_license &lt;- read_csv(\n  'https://bcdanl.github.io/data/nyc_dog_license.csv')\n\nRows: 222328 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): animal_name, animal_gender, breed_rc, borough\ndbl  (3): animal_birth_year, zip_code, extract_year\ndate (2): license_issued_date, license_expired_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nnyc_zips_coord &lt;- read_csv(\n  'https://bcdanl.github.io/data/nyc_zips_coord.csv')\n\nRows: 11175 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (3): X, Y, objectid\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nnyc_zips_df &lt;- read_csv(\n  'https://bcdanl.github.io/data/nyc_zips_df.csv')\n\nRows: 262 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): po_name, state, borough, cty_fips, x_id\ndbl (6): objectid, zip_code, st_fips, bld_gpostal_code, shape_leng, shape_area\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Joining two data frames using a common variable\nnyc_zips_df &lt;- nyc_zips_df %&gt;% \n  left_join(nyc_zips_coord)\n\nJoining with `by = join_by(objectid)`\n\n\nWarning in left_join(., nyc_zips_coord): Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 1 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning.\n\n# Creating a data frame of the top 5 dog breeds by count\nnyc_dogs &lt;- nyc_dog_license %&gt;%\n  group_by(breed_rc) %&gt;% \n  summarise(N = n()) %&gt;% \n  filter(dense_rank(-N)&lt;=5)\n\n# Creating a data frame of dog breed frequency and percentage by zip code for the top 5 breeds\nnyc_fb &lt;- nyc_dog_license %&gt;%\n  group_by(zip_code, breed_rc) %&gt;%\n  summarize(n = n()) %&gt;%\n  mutate(freq = n / sum(n),\n         pct = round(freq*100, 2)) %&gt;%\n  filter(breed_rc %in% nyc_dogs$breed_rc )\n\n`summarise()` has grouped output by 'zip_code'. You can override using the\n`.groups` argument.\n\n# theme_nymap &lt;- function(base_size=9, base_family=\"\") {\n#   require(grid)\n#   theme_bw(base_size=base_size, base_family=base_family) %+replace%\n#     theme(axis.line=element_blank(),\n#           axis.text=element_blank(),\n#           axis.ticks=element_blank(),\n#           axis.title=element_blank(),\n#           panel.background=element_blank(),\n#           panel.border=element_blank(),\n#           panel.grid=element_blank(),\n#           panel.spacing=unit(0, \"lines\"),\n#           plot.background=element_blank(),\n#     )\n# }\n\n\n# Create a map of New York City zip codes colored by the share of Pit Bull dogs \n# and their mixes out of all licensed dogs, based on licensing data\nfb_map &lt;- nyc_zips_df %&gt;% \n  left_join(nyc_fb)\n\nJoining with `by = join_by(zip_code)`\n\n\nWarning in left_join(., nyc_fb): Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 1 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning.\n\n# Filter for Pit Bull breeds and plot the map\nfilter(fb_map, breed_rc %in% c('Pit Bull (or Mix)')) %&gt;% \n  ggplot(mapping = aes(x = X, y = Y, \n                       fill = pct,\n                       group = zip_code)) +\n  geom_polygon(color = \"gray80\", \n               size = 0.1) +    # draw the zip code polygons\n  scale_fill_viridis_c(option = \"inferno\",\n                       breaks = seq(0,24,2)) +  # set the color scale for Pit Bull share\n  labs(fill = \"Pit Bull's Share of All Licensed Dogs (%)\",\n       title = \"New York City's Pit Bull\",\n       subtitle = \"By Zip Code. Based on Licensing Data\") +  # set the map title and legend title\n  theme_map() +  # set the map theme\n  theme(legend.justification = c(.5,.5),\n        legend.position = 'top',\n        legend.direction = \"horizontal\",\n        legend.text = element_text(size= rel(1.25)),\n        legend.title = element_text(size= rel(1.25),\n                                face = 'bold',\n                                hjust = .5),\n        plot.title = element_text(hjust = .5,\n                                  vjust = .5,\n                                  face = 'bold',\n                                  size = rel(2.25)),\n        plot.subtitle = element_text(hjust = .5,\n                                     vjust = .5,\n                                     size = rel(1.25))) +  # customize the theme of the plot\n  coord_map(projection = \"albers\", lat0 = 39, lat1 = 45) +  # set the map projection\n  guides(fill = guide_legend(title.position = \"top\",\n                             label.position = \"bottom\",\n                             keywidth = 1, nrow = 1))  # set the legend position\n\n\n\n\n\nq3b &lt;- fb_map %&gt;% \n  select(zip_code, breed_rc, pct) %&gt;% \n  filter(breed_rc == 'Pit Bull (or Mix)') %&gt;% \n  arrange(-pct) %&gt;% \n  distinct()\n\n\nstock &lt;- read_csv('https://bcdanl.github.io/data/stocks2013_2023.csv')\n\nRows: 17983 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): company\ndbl  (6): Open, High, Low, Close, Adj Close, Volume\ndate (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Create a new variable year extracted from the Date column\nstock &lt;- stock %&gt;% \n  mutate(year = year(Date))\n\np &lt;- ggplot(data = filter(stock, year &gt;= 2019, year &lt;= 2022 ) , \n            aes(x = log(Volume), y = log(Close), color = company))\n\np + \n  geom_point(alpha = .05) +\n  geom_smooth(method = lm, color = 'black') +\n  facet_grid( company ~ year, scales = 'free' ) +\n  labs(x = 'Volume (in log)',\n       y = 'Close (in log)') +\n  guides(color = \"none\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n# Create a new variable year extracted from the Date column\nstock &lt;- stock %&gt;% \n  mutate(year = year(Date))\n\np &lt;- ggplot(data = filter(stock, year &gt;= 2019, year &lt;= 2022 ) , \n            aes(x = log(Volume), y = log(Close), color = company))\n\np + \n  geom_point(alpha = .05) +\n  geom_smooth(method = lm, color = 'black') +\n  facet_grid( company ~ year ) +\n  labs(x = 'Volume (in log)',\n       y = 'Close (in log)') +\n  guides(color = \"none\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nlibrary(broom)\n\nWarning: package 'broom' was built under R version 4.2.3\n\nreg &lt;- lm(log(Volume) ~ log(Close) * company,\n          data = filter(stock, year == 2020))\nreg_sum &lt;- tidy(reg, conf.int = T) %&gt;% \n  filter(str_detect(term, \"log\"), term != \"log(Close)\")\n\nggplot(reg_sum,\n       aes(x = estimate, y = fct_reorder(term, estimate),\n           xmin = conf.low, \n           xmax = conf.high)) +\n  geom_point() +\n  geom_pointrange() +\n  geom_vline(xintercept = 0, color = 'red', lty = 2)"
  },
  {
    "objectID": "Erik's_Website.html",
    "href": "Erik's_Website.html",
    "title": "Erik Wojcik",
    "section": "",
    "text": "I am a student at State University of New York at Geneseo.\nI am interested in Finance and Wealth Management."
  },
  {
    "objectID": "Erik's_Website.html#education",
    "href": "Erik's_Website.html#education",
    "title": "Erik Wojcik",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo, 2023 - Bachelor of Science in Business Administration - Data Analytics"
  },
  {
    "objectID": "Erik's_Website.html#professional-experience",
    "href": "Erik's_Website.html#professional-experience",
    "title": "Erik Wojcik",
    "section": "Professional Experience",
    "text": "Professional Experience\nM&T Bank / Wilmington Trust, 2023 - Incoming Management Development Program Trainee (Wealth Management)\nState University of New York at Geneseo, 2022-2023 - Financial Aid Office Assistant (Work Study Program)\nState University of New York at Geneseo, 2022-2023 - Finance and Data Analytics Research Assistant\nRich Products, 2021-2022 - Business Analytics Intern"
  },
  {
    "objectID": "hw0.html",
    "href": "hw0.html",
    "title": "Homework 1",
    "section": "",
    "text": "Renovate your personal website on GitHub using Quarto."
  },
  {
    "objectID": "hw0.html#question-1",
    "href": "hw0.html#question-1",
    "title": "Homework 1",
    "section": "",
    "text": "Renovate your personal website on GitHub using Quarto."
  },
  {
    "objectID": "teamproj0.html",
    "href": "teamproj0.html",
    "title": "Comparing Apple (AAPL) & S&P 500 (SPY) Using Capital Asset Pricing Model",
    "section": "",
    "text": "1 Introduction\nApple is one of the most prominent companies in the world with a market capitalization of over $2 trillion. Apple’s stock price is often used as an indicator of the health of the tech industry and the stock market as a whole. The S&P 500 is a benchmark index of 500 of the largest publicly traded companies in the United States. By comparing Apple’s performance to the S&P 500 through a Capital Asset Pricing Model (CAPM), I can gain insights into the relative performance of Apple as an investment opportunity and how it has responded to different market conditions over the years. This project is interesting because it provides a deeper understanding of the performance of Apple, which can be useful for investors, financial analysts, and researchers.\nMy research question is “How does Apple’s stock price compare to the S&P 500 using a Capital Asset Pricing Model (CAPM) from 2000-2023?”\nI am conducting a research project to analyze the performance of Apple’s stock compared to the S&P 500 using a Capital Asset Pricing Model (CAPM) from 2000-2023. The purpose of this project is to gain insights into the relative performance of Apple as an investment opportunity and how it has responded to different market conditions over the years. This project is important for me as an investor, as it provides a deeper understanding of the performance of Apple and its potential as a long-term investment.\nThe project will be divided into four main parts: the conceptual framework, data exploration and visualization, modeling and analysis, and report writing. In the first phase, I will collect data from the quantmod package as well as importing from tidyquant. In the second phase, I will explore the data through summary statistics, historical context, and visualizations to gain insights into the performance of Apple and the S&P 500. In the third phase, I will estimate the beta and alpha coefficients using a linear regression model and interpret the results. Finally, in the fourth phase, I will write a report summarizing my findings, including insights into Apple’s performance, the statistical significance of my results, and potential implications for me as an investor.\n\n\n2 Conceptual Framework\nThe Capital Asset Pricing Model (CAPM) is a theoretical framework that seeks to explain the relationship between the expected return on an asset and the risk-free rate of return, the expected market return, and the asset’s beta coefficient. It is a widely-used framework in finance that provides insights into how investors should price risky assets.\nThe variables in the CAPM model are:\nRf: The risk-free rate of return, which represents the theoretical return an investor would receive if they invested in a risk-free asset, such as a US Treasury bond. Rm: The expected return of the market, which represents the average return of all the assets in the market. β: The beta coefficient of the asset, which measures the volatility of the asset relative to the market. R_i: The expected return on the asset, which represents the return an investor would expect to receive from investing in the asset.\nThe equation is:\nReturn on Investment = Risk Free Rate + β(Return on Market - Risk Free Rate)\n\n\n3 Apples Historical Stock Price (Context)\n\n#APPLES HISTORIC STOCK PRICES\nlibrary(quantmod)\n\n# Get Apple's stock price data from Yahoo Finance\naapl &lt;- getSymbols(\"AAPL\", from=\"2000-01-01\", to=\"2023-05-08\", auto.assign=FALSE)\n\n# Plot the closing price of Apple's stock\nplot(aapl$AAPL.Close, type=\"l\", xlab=\"Date\", ylab=\"Closing Price\",\n     main=\"Apple Stock Price from 2000 to 2023\")\n\n\n\n\n\n\n4 S&P 500’S Historical Stock Price (Context)\n\n#S&P500 HISTORIC STOCK PRICES\nlibrary(quantmod)\n\n# Get S&P500's stock price data from Yahoo Finance\nspy &lt;- getSymbols(\"SPY\", from=\"2000-01-01\", to=\"2023-05-08\", auto.assign=FALSE)\n\n# Plot the closing price of S&P500's stock\nplot(spy$SPY.Close, type=\"l\", xlab=\"Date\", ylab=\"Closing Price\",\n     main=\"SPY Stock Price from 2000 to 2023\")\n\n\n\n\n\n\n5 Calculate Daily Returns for Apple and S&P 500\n\n# Calculate the daily returns for Apple stock and the S&P 500 index\naapl_returns &lt;- dailyReturn(aapl)\nspy_returns &lt;- dailyReturn(spy)\n\n# Set the risk-free rate (10-year Treasury bond yield)\nrisk_free_rate &lt;- 0.0263/252\n\n# Calculate the excess returns for Apple stock and the S&P 500 index\naapl_excess_returns &lt;- aapl_returns - risk_free_rate\nspy_excess_returns &lt;- spy_returns - risk_free_rate\n\n\n\n6 Visualization of Daily Returns\n\n# Visualize the daily returns for Apple stock and the S&P 500 index\nggplot() +\n  geom_line(aes(x = index(aapl_returns), y = aapl_returns, color = \"AAPL\")) +\n  geom_line(aes(x = index(spy_returns), y = spy_returns, color = \"S&P 500\")) +\n  labs(title = \"Daily Returns for AAPL and S&P 500\",\n       x = \"Date\",\n       y = \"Daily Return\",\n       color = \"Index\") +\n  scale_color_manual(values = c(\"blue\", \"red\"))\n\n\n\ntheme_bw()\n\nList of 94\n $ line                      :List of 6\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ lineend      : chr \"butt\"\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ rect                      :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ text                      :List of 11\n  ..$ family       : chr \"\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 11\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                     : NULL\n $ aspect.ratio              : NULL\n $ axis.title                : NULL\n $ axis.title.x              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.75points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.top          :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.75points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.bottom       : NULL\n $ axis.title.y              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.75points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.y.left         : NULL\n $ axis.title.y.right        :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : num -90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.75points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text                 :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : chr \"grey30\"\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x               :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.2points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.top           :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.2points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.bottom        : NULL\n $ axis.text.y               :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.y.left          : NULL\n $ axis.text.y.right         :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.ticks                :List of 6\n  ..$ colour       : chr \"grey20\"\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ lineend      : NULL\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ axis.ticks.x              : NULL\n $ axis.ticks.x.top          : NULL\n $ axis.ticks.x.bottom       : NULL\n $ axis.ticks.y              : NULL\n $ axis.ticks.y.left         : NULL\n $ axis.ticks.y.right        : NULL\n $ axis.ticks.length         : 'simpleUnit' num 2.75points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x       : NULL\n $ axis.ticks.length.x.top   : NULL\n $ axis.ticks.length.x.bottom: NULL\n $ axis.ticks.length.y       : NULL\n $ axis.ticks.length.y.left  : NULL\n $ axis.ticks.length.y.right : NULL\n $ axis.line                 : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.line.x               : NULL\n $ axis.line.x.top           : NULL\n $ axis.line.x.bottom        : NULL\n $ axis.line.y               : NULL\n $ axis.line.y.left          : NULL\n $ axis.line.y.right         : NULL\n $ legend.background         :List of 5\n  ..$ fill         : NULL\n  ..$ colour       : logi NA\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ legend.margin             : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing            : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing.x          : NULL\n $ legend.spacing.y          : NULL\n $ legend.key                :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : logi NA\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ legend.key.size           : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height         : NULL\n $ legend.key.width          : NULL\n $ legend.text               :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.align         : NULL\n $ legend.title              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.align        : NULL\n $ legend.position           : chr \"right\"\n $ legend.direction          : NULL\n $ legend.justification      : chr \"center\"\n $ legend.box                : NULL\n $ legend.box.just           : NULL\n $ legend.box.margin         : 'margin' num [1:4] 0cm 0cm 0cm 0cm\n  ..- attr(*, \"unit\")= int 1\n $ legend.box.background     : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.box.spacing        : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n $ panel.background          :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : logi NA\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ panel.border              :List of 5\n  ..$ fill         : logi NA\n  ..$ colour       : chr \"grey20\"\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ panel.spacing             : 'simpleUnit' num 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ panel.spacing.x           : NULL\n $ panel.spacing.y           : NULL\n $ panel.grid                :List of 6\n  ..$ colour       : chr \"grey92\"\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ lineend      : NULL\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ panel.grid.major          : NULL\n $ panel.grid.minor          :List of 6\n  ..$ colour       : NULL\n  ..$ linewidth    : 'rel' num 0.5\n  ..$ linetype     : NULL\n  ..$ lineend      : NULL\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ panel.grid.major.x        : NULL\n $ panel.grid.major.y        : NULL\n $ panel.grid.minor.x        : NULL\n $ panel.grid.minor.y        : NULL\n $ panel.ontop               : logi FALSE\n $ plot.background           :List of 5\n  ..$ fill         : NULL\n  ..$ colour       : chr \"white\"\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ plot.title                :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 1.2\n  ..$ hjust        : num 0\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 5.5points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ plot.title.position       : chr \"panel\"\n $ plot.subtitle             :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 5.5points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ plot.caption              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : num 1\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 5.5points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ plot.caption.position     : chr \"panel\"\n $ plot.tag                  :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 1.2\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ plot.tag.position         : chr \"topleft\"\n $ plot.margin               : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ strip.background          :List of 5\n  ..$ fill         : chr \"grey85\"\n  ..$ colour       : chr \"grey20\"\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ strip.background.x        : NULL\n $ strip.background.y        : NULL\n $ strip.clip                : chr \"inherit\"\n $ strip.placement           : chr \"inside\"\n $ strip.text                :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : chr \"grey10\"\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 4.4points 4.4points 4.4points 4.4points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ strip.text.x              : NULL\n $ strip.text.y              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : num -90\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ strip.switch.pad.grid     : 'simpleUnit' num 2.75points\n  ..- attr(*, \"unit\")= int 8\n $ strip.switch.pad.wrap     : 'simpleUnit' num 2.75points\n  ..- attr(*, \"unit\")= int 8\n $ strip.text.y.left         :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE\n\n\nA positive daily return on the X-axis indicates a gain in value for that day, while a negative daily return indicates a loss. The Y-axis shows the daily returns over the entire period from 2000-2023.\nBy analyzing the line graph, you can see that there have been periods of high volatility where daily returns have been more erratic, and other periods of relative stability where returns have been more consistent. You can also observe any patterns or trends in the daily returns over time, such as whether there are more periods of gains or losses, and whether the returns for AAPL and S&P 500 move together or independently of each other.\n\n\n7 Visualization the Excess Returns\n\n# Visualize the excess returns for Apple stock and the S&P 500 index\nggplot() +\n  geom_point(aes(x = spy_excess_returns, y = aapl_excess_returns)) +\n  geom_smooth(aes(x = spy_excess_returns, y = aapl_excess_returns)) +\n  labs(title = \"Excess Returns for AAPL vs S&P 500\",\n       x = \"Excess Return for S&P 500\",\n       y = \"Excess Return for AAPL\") +\n  theme_bw()\n\n\n\n\nThe x-axis represents the excess return for AAPL, while the y-axis represents the excess return for the S&P 500. The graph shows the relationship between the excess returns for Apple and the broader market as represented by the S&P 500.\nTt suggests that Apple has outperformed the S&P 500, and for every positive excess return for the S&P 500, Apple has achieved a higher excess return.\nAdditionally, the distance of each point from the origin represents the magnitude of the excess returns. If the point is closer to the origin, it suggests a lower excess return, while a point farther from the origin indicates a higher excess return. In this case the points are farther away from the origin.\n\n\n8 Capital Asset Price Model for Apple from 2000-2023\n\nlibrary(tidyquant)\nlibrary(tidyverse)\n\n# Import stock prices\nstock_prices &lt;- c(\"AAPL\") %&gt;%\n    tq_get(get  = \"stock.prices\",\n           from = today() - years(23)) %&gt;%\n    group_by(symbol)\n\nstock_prices\n\n# A tibble: 5,786 × 8\n# Groups:   symbol [1]\n   symbol date        open  high   low close    volume adjusted\n   &lt;chr&gt;  &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 AAPL   2000-05-08 1.00  1.02  0.982 0.983 184900800    0.837\n 2 AAPL   2000-05-09 0.985 0.993 0.936 0.941 327140800    0.801\n 3 AAPL   2000-05-10 0.929 0.938 0.882 0.887 535091200    0.755\n 4 AAPL   2000-05-11 0.905 0.931 0.884 0.918 499744000    0.781\n 5 AAPL   2000-05-12 0.946 0.987 0.935 0.961 306913600    0.818\n 6 AAPL   2000-05-15 0.965 0.965 0.894 0.902 678932800    0.768\n 7 AAPL   2000-05-16 0.933 0.974 0.917 0.944 440451200    0.803\n 8 AAPL   2000-05-17 0.925 0.926 0.896 0.905 398092800    0.770\n 9 AAPL   2000-05-18 0.920 0.937 0.898 0.900 373777600    0.766\n10 AAPL   2000-05-19 0.886 0.886 0.834 0.839 740667200    0.714\n# ℹ 5,776 more rows\n\nRa &lt;- stock_prices %&gt;%\n    tq_transmute(select     = adjusted, \n                 mutate_fun = periodReturn, \n                 period     = \"yearly\", \n                 col_rename = \"Ra\")\nRa\n\n# A tibble: 24 × 3\n# Groups:   symbol [1]\n   symbol date           Ra\n   &lt;chr&gt;  &lt;date&gt;      &lt;dbl&gt;\n 1 AAPL   2000-12-29 -0.730\n 2 AAPL   2001-12-31  0.472\n 3 AAPL   2002-12-31 -0.346\n 4 AAPL   2003-12-31  0.491\n 5 AAPL   2004-12-31  2.01 \n 6 AAPL   2005-12-30  1.23 \n 7 AAPL   2006-12-29  0.180\n 8 AAPL   2007-12-31  1.33 \n 9 AAPL   2008-12-31 -0.569\n10 AAPL   2009-12-31  1.47 \n# ℹ 14 more rows\n\nsummary(Ra)\n\n    symbol               date                  Ra          \n Length:24          Min.   :2000-12-29   Min.   :-0.72985  \n Class :character   1st Qu.:2006-09-29   1st Qu.: 0.05299  \n Mode  :character   Median :2012-06-30   Median : 0.34220  \n                    Mean   :2012-06-20   Mean   : 0.40859  \n                    3rd Qu.:2018-03-30   3rd Qu.: 0.60378  \n                    Max.   :2023-05-05   Max.   : 2.01357  \n\n#Average yearly return is .02614\n\n\nRb &lt;- \"^GSPC\" %&gt;%\n    tq_get(get  = \"stock.prices\",\n           from = today() - years(23)) %&gt;%\n    tq_transmute(select     = adjusted, \n                 mutate_fun = periodReturn, \n                 period     = \"yearly\", \n                 col_rename = \"Rb\")\nsummary(Rb)\n\n      date                  Rb          \n Min.   :2000-12-29   Min.   :-0.38486  \n 1st Qu.:2006-09-29   1st Qu.:-0.02104  \n Median :2012-06-30   Median : 0.09264  \n Mean   :2012-06-20   Mean   : 0.06095  \n 3rd Qu.:2018-03-30   3rd Qu.: 0.17049  \n Max.   :2023-05-05   Max.   : 0.29601  \n\n#Average yearly return is .004846\n\n\nRaRb &lt;- left_join(Ra, Rb, by = c(\"date\" = \"date\"))\nRaRb\n\n# A tibble: 24 × 4\n# Groups:   symbol [1]\n   symbol date           Ra      Rb\n   &lt;chr&gt;  &lt;date&gt;      &lt;dbl&gt;   &lt;dbl&gt;\n 1 AAPL   2000-12-29 -0.730 -0.0729\n 2 AAPL   2001-12-31  0.472 -0.130 \n 3 AAPL   2002-12-31 -0.346 -0.234 \n 4 AAPL   2003-12-31  0.491  0.264 \n 5 AAPL   2004-12-31  2.01   0.0899\n 6 AAPL   2005-12-30  1.23   0.0300\n 7 AAPL   2006-12-29  0.180  0.136 \n 8 AAPL   2007-12-31  1.33   0.0353\n 9 AAPL   2008-12-31 -0.569 -0.385 \n10 AAPL   2009-12-31  1.47   0.235 \n# ℹ 14 more rows\n\nRaRb_capm &lt;- RaRb %&gt;%\n    tq_performance(Ra = Ra, \n                   Rb = Rb, \n                   performance_fun = table.CAPM)\nRaRb_capm\n\n# A tibble: 1 × 13\n# Groups:   symbol [1]\n  symbol ActivePremium Alpha AnnualizedAlpha  Beta `Beta-` `Beta+` Correlation\n  &lt;chr&gt;          &lt;dbl&gt; &lt;dbl&gt;           &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;       &lt;dbl&gt;\n1 AAPL           0.204 0.295           0.295  1.87    1.46   -1.72       0.504\n# ℹ 5 more variables: `Correlationp-value` &lt;dbl&gt;, InformationRatio &lt;dbl&gt;,\n#   `R-squared` &lt;dbl&gt;, TrackingError &lt;dbl&gt;, TreynorRatio &lt;dbl&gt;\n\n\n\n\n9 Analysis on Apple’s Alpha\nAn alpha coefficient is a measure of a stock’s excess return compared to its expected return based on the market’s performance, as represented by the beta coefficient. In this case, Apple’s year over year alpha from 2000-2023 was .2947 higher than market. This positive value suggests that Apple’s stock has provided a higher return than what would be expected based on its level of market risk.\nThis finding can be interpreted as a positive signal for investors, indicating that Apple has been able to generate higher returns than what would be expected from a comparable investment with the same level of risk.\n\n\n10 Analysis of Apple’s Beta\nA beta coefficient measures the sensitivity of a stock’s returns to changes in the overall market. A beta of 1 indicates that the stock moves in line with the market, while a beta greater than 1 indicates that the stock is more volatile than the market, and a beta less than 1 indicates that the stock is less volatile than the market. In the case of Apple, a beta coefficient of 1.8695 indicates that its stock price is more volatile than the overall market, as represented by the S&P 500 index. This means that changes in the S&P 500 are likely to have a larger impact on Apple’s stock price compared to other stocks with lower beta coefficients.\nInvestors who are risk-averse may view a high beta stock like Apple as more risky than the market average, and may require a higher expected return to compensate for this additional risk. On the other hand, investors who are comfortable with taking on more risk may see Apple as an opportunity to potentially earn higher returns than the market, although this comes with the risk of larger losses during downturns."
  }
]